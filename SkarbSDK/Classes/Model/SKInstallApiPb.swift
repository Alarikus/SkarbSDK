// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: app_install_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Installapi_Auth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var bundleID: String = String()

  var agentName: String = String()

  var agentVer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Installapi_DeviceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: Installapi_Auth {
    get {return _auth ?? Installapi_Auth()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  /// random unique value, e.g. timestamp+rand(int64)
  var installID: String = String()

  var idfa: String = String()

  var idfv: String = String()

  var bundleVer: String = String()

  var locale: String = String()

  var device: String = String()

  var osVer: String = String()

  var receiptURL: String = String()

  var receiptLen: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: Installapi_Auth? = nil
}

struct Installapi_AttribRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: Installapi_Auth {
    get {return _auth ?? Installapi_Auth()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var installID: String = String()

  var broker: String = String()

  /// json data
  var payload: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: Installapi_Auth? = nil
}

struct Installapi_TestRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: Installapi_Auth {
    get {return _auth ?? Installapi_Auth()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var installID: String = String()

  var name: String = String()

  var group: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: Installapi_Auth? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "installapi"

extension Installapi_Auth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Auth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "bundle_id"),
    3: .standard(proto: "agent_name"),
    4: .standard(proto: "agent_ver"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.bundleID)
      case 3: try decoder.decodeSingularStringField(value: &self.agentName)
      case 4: try decoder.decodeSingularStringField(value: &self.agentVer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 2)
    }
    if !self.agentName.isEmpty {
      try visitor.visitSingularStringField(value: self.agentName, fieldNumber: 3)
    }
    if !self.agentVer.isEmpty {
      try visitor.visitSingularStringField(value: self.agentVer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Installapi_Auth, rhs: Installapi_Auth) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs.agentName != rhs.agentName {return false}
    if lhs.agentVer != rhs.agentVer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Installapi_DeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "install_id"),
    3: .same(proto: "idfa"),
    4: .same(proto: "idfv"),
    5: .standard(proto: "bundle_ver"),
    6: .same(proto: "locale"),
    7: .same(proto: "device"),
    8: .standard(proto: "os_ver"),
    9: .standard(proto: "receipt_url"),
    10: .standard(proto: "receipt_len"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._auth)
      case 2: try decoder.decodeSingularStringField(value: &self.installID)
      case 3: try decoder.decodeSingularStringField(value: &self.idfa)
      case 4: try decoder.decodeSingularStringField(value: &self.idfv)
      case 5: try decoder.decodeSingularStringField(value: &self.bundleVer)
      case 6: try decoder.decodeSingularStringField(value: &self.locale)
      case 7: try decoder.decodeSingularStringField(value: &self.device)
      case 8: try decoder.decodeSingularStringField(value: &self.osVer)
      case 9: try decoder.decodeSingularStringField(value: &self.receiptURL)
      case 10: try decoder.decodeSingularStringField(value: &self.receiptLen)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.installID.isEmpty {
      try visitor.visitSingularStringField(value: self.installID, fieldNumber: 2)
    }
    if !self.idfa.isEmpty {
      try visitor.visitSingularStringField(value: self.idfa, fieldNumber: 3)
    }
    if !self.idfv.isEmpty {
      try visitor.visitSingularStringField(value: self.idfv, fieldNumber: 4)
    }
    if !self.bundleVer.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleVer, fieldNumber: 5)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 6)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 7)
    }
    if !self.osVer.isEmpty {
      try visitor.visitSingularStringField(value: self.osVer, fieldNumber: 8)
    }
    if !self.receiptURL.isEmpty {
      try visitor.visitSingularStringField(value: self.receiptURL, fieldNumber: 9)
    }
    if !self.receiptLen.isEmpty {
      try visitor.visitSingularStringField(value: self.receiptLen, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Installapi_DeviceRequest, rhs: Installapi_DeviceRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.installID != rhs.installID {return false}
    if lhs.idfa != rhs.idfa {return false}
    if lhs.idfv != rhs.idfv {return false}
    if lhs.bundleVer != rhs.bundleVer {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.device != rhs.device {return false}
    if lhs.osVer != rhs.osVer {return false}
    if lhs.receiptURL != rhs.receiptURL {return false}
    if lhs.receiptLen != rhs.receiptLen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Installapi_AttribRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttribRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "install_id"),
    3: .same(proto: "broker"),
    4: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._auth)
      case 2: try decoder.decodeSingularStringField(value: &self.installID)
      case 3: try decoder.decodeSingularStringField(value: &self.broker)
      case 4: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.installID.isEmpty {
      try visitor.visitSingularStringField(value: self.installID, fieldNumber: 2)
    }
    if !self.broker.isEmpty {
      try visitor.visitSingularStringField(value: self.broker, fieldNumber: 3)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Installapi_AttribRequest, rhs: Installapi_AttribRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.installID != rhs.installID {return false}
    if lhs.broker != rhs.broker {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Installapi_TestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "install_id"),
    3: .same(proto: "name"),
    4: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._auth)
      case 2: try decoder.decodeSingularStringField(value: &self.installID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.group)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.installID.isEmpty {
      try visitor.visitSingularStringField(value: self.installID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Installapi_TestRequest, rhs: Installapi_TestRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.installID != rhs.installID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.group != rhs.group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
